#!/bin/sh
# -------------------------- CUT THIS SECTION ---------------------------
#  This is a template to create a personal plugin
#
#  Each plugin should at least have several variables defined with the
#  prefix PLUGIN_* (see below)
#
#  To add a section header, use the InsertSection function (see below)
#
# -------------------------- CUT THIS SECTION ---------------------------

#########################################################################
#
#    * DO NOT REMOVE *
#-----------------------------------------------------
PLUGIN_AUTHOR=___Christian_Trabold_info@christian-trabold.de___
PLUGIN_CATEGORY=[users]
PLUGIN_DESC=[Check user setup]
PLUGIN_NAME=[users]
PLUGIN_REQUIRED_TESTS=
#-----------------------------------------------------
#########################################################################
#
#
#
#########################################################################
#
# Add custom section to screen output
#    InsertSection "Personal Plugin"
#
#################################################################################
#
    # Test        : CUS-0002
    # Description : check for ssh keys in /root/.ssh/authorized_keys

    # # First check if OPENSSLBINARY is known as a prerequisite for this test.
    # if [ ! -z "${OPENSSLBINARY}" ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
    # Register --test-no CUS-0000 --preqs-met ${PREQS_MET} --weight L --network NO --description "Description of custom test"

    # Just do check without any prerequisites
    Register --test-no CUS-0001 --weight L --network NO --description "Description of custom test"
    if [ ${SKIPTEST} -eq 0 ]; then
        FOUNDPROBLEM=0
        # Check if a directory exists
        # - get all folders in /home/: ls -1 /home
        # - check if they exist in /etc/passwd
        # -
        if [ -d /my/path ]; then
                logtext "Result: log entry for easier debugging or additional information"
              else
                FOUNDPROBLEM=1
                logtext "Result: problem found!"
                ReportWarning ${TEST_NO} "M" "This is a test warning line"
        fi

        if [ ${FOUNDPROBLEM} -eq 0 ]; then
            Display --indent 2 --text "- Checking xxx..." --result OK --color GREEN
          else
            Display --indent 2 --text "- Checking xxx..." --result WARNING --color RED
            ReportSuggestion ${TEST_NO} "This is a suggestion"
            ReportWarning ${TEST_NO} "M" "This is a medium level warning"
        fi
    fi
#
#################################################################################
#

# Wait for keypress (unless --quick is being used)
wait_for_keypress

#EOF
